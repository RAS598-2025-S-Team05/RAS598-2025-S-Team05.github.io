{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Coordinated Autonomy: Goal-Oriented Navigation with TurtleBot and ESP32","text":"","tags":["robotics","ROS2","TurtleBot","ESP32"]},{"location":"#about-us","title":"About Us","text":"<ul> <li>Team Number: 05  </li> <li>Team Members: Asrith Pandreka, Varun Karthik, Anjali Notani  </li> <li>Semester and Year: Spring 2025  </li> <li>University: Arizona State University  </li> <li>Class: RAS598 Experimentation and Deployment of Robotics  </li> <li>Advising Faculty: Dr. Daniel Aukes  </li> </ul>","tags":["robotics","ROS2","TurtleBot","ESP32"]},{"location":"#1-introduction","title":"1. Introduction","text":"","tags":["robotics","ROS2","TurtleBot","ESP32"]},{"location":"#project-scope","title":"Project Scope","text":"<p>Our current project focuses on enabling autonomous navigation and control for a TurtleBot 4 using integrated sensor data and remote coordination. It centers around mobile robot navigation in indoor environments using a combination of real-time data and remote commands.</p> <p>The system integrates a TurtleBot equipped with LiDAR, IMU, and a camera, communicating with a Raspberry Pi running ROS2. Additionally, an ESP32 microcontroller equipped with an IMU is used to send goal coordinates wirelessly to the Raspberry Pi. Based on this input and onboard sensor data, the Raspberry Pi processes information for mapping, control, path planning, and navigation.</p> <p>The revised core research question is: \"How can sensor fusion and real-time feedback be used to enable autonomous indoor navigation of a mobile robot based on external goal coordinates?\"</p> <p>This project investigates how autonomous systems can utilize ROS2 to process multi-sensor inputs for effective localization, navigation, and decision-making. It emphasizes integrating low-cost microcontrollers, real-time feedback loops, and live data visualization to enhance autonomy.</p>","tags":["robotics","ROS2","TurtleBot","ESP32"]},{"location":"#project-architecture-diagram","title":"Project Architecture Diagram","text":"","tags":["robotics","ROS2","TurtleBot","ESP32"]},{"location":"#2-hardware-and-software-requirements","title":"2. Hardware and Software Requirements","text":"","tags":["robotics","ROS2","TurtleBot","ESP32"]},{"location":"#hardware-components","title":"Hardware Components","text":"<p>TurtleBot 4 Equipped with LiDAR, IMU, and a camera, TurtleBot serves as the core mobile platform. It operates on a Raspberry Pi, running ROS2 to support real-time sensor-based navigation and control.</p> <p>ESP32 Microcontroller with IMU Sends goal coordinates and orientation data wirelessly to the Raspberry Pi. The onboard IMU captures heading and motion, aiding remote coordination.</p> <p>Compute System Raspberry Pi 4 on TurtleBot runs ROS2 and processes all sensor data for decision-making.</p> <p>Communication Data is exchanged between ESP32 and Raspberry Pi via ROS2 topics.</p>","tags":["robotics","ROS2","TurtleBot","ESP32"]},{"location":"#interface-mockup","title":"Interface Mockup","text":"","tags":["robotics","ROS2","TurtleBot","ESP32"]},{"location":"#software-components","title":"Software Components","text":"<ul> <li>Operating System: Ubuntu 22.04  </li> <li>Robotics Framework: ROS2 (Humble)  </li> <li>Visualization Tools: RViz2, rqt, custom GUI (PyQt or similar)  </li> <li>SLAM &amp; Navigation:  </li> <li>SLAM Toolbox for mapping  </li> <li>Nav2 Stack for path planning and obstacle avoidance  </li> <li>Filtering:  </li> <li>Low-pass filter applied to ESP32 IMU data before fusion or visualization  </li> <li>Custom ROS2 Nodes:  </li> <li>Node to receive and parse ESP32 coordinates  </li> <li>Sensor data publishers for LiDAR, camera, and IMU  </li> <li>Navigation and control node for goal-directed movement  </li> <li>GUI node for live data visualization  </li> </ul>","tags":["robotics","ROS2","TurtleBot","ESP32"]},{"location":"#3-sensor-integration-and-interaction","title":"3. Sensor Integration and Interaction","text":"Sensor Function ESP32 IMU Sends orientation and goal coordinates to Raspberry Pi TurtleBot Camera Assists in obstacle detection and path planning LiDAR Provides real-time mapping and obstacle detection TurtleBot IMU Supplies orientation and stability information for navigation <p>A low-pass filter is applied to the ESP32\u2019s IMU data to eliminate high-frequency noise and improve heading stability!</p>","tags":["robotics","ROS2","TurtleBot","ESP32"]},{"location":"#4-control-flow-and-autonomy","title":"4. Control Flow and Autonomy","text":"","tags":["robotics","ROS2","TurtleBot","ESP32"]},{"location":"#esp32-raspberry-pi","title":"ESP32 \u2192 Raspberry Pi","text":"<p>The ESP32 periodically sends goal coordinates and IMU orientation data to the Raspberry Pi wirelessly.</p>","tags":["robotics","ROS2","TurtleBot","ESP32"]},{"location":"#sensor-processing-on-raspberry-pi","title":"Sensor Processing on Raspberry Pi","text":"<p>Camera, IMU, and LiDAR data are collected via ROS2 topics. The Raspberry Pi fuses these inputs for localization and mapping.</p>","tags":["robotics","ROS2","TurtleBot","ESP32"]},{"location":"#autonomous-control","title":"Autonomous Control","text":"<ul> <li>SLAM Toolbox constructs a real-time map of the environment.  </li> <li>Nav2 performs path planning and sends movement commands.  </li> <li>GUI provides real-time feedback of sensor inputs and robot status.  </li> </ul>","tags":["robotics","ROS2","TurtleBot","ESP32"]},{"location":"#5-preparation-needs","title":"5. Preparation Needs","text":"<ul> <li>ROS2 Environment Setup </li> <li>Installation of ROS2 Humble on Ubuntu  </li> <li> <p>Configuration of ROS2 workspaces for TurtleBot  </p> </li> <li> <p>Hardware Testing </p> </li> <li>Calibration of the external camera and LiDAR  </li> <li> <p>Testing TurtleBot navigation  </p> </li> <li> <p>Software Development </p> </li> <li>Writing ROS2 nodes for communication  </li> <li> <p>Implementing object detection using OpenCV  </p> </li> <li> <p>Simulation Setup </p> </li> <li>Running Rviz simulations before physical implementation  </li> </ul>","tags":["robotics","ROS2","TurtleBot","ESP32"]},{"location":"#6-final-demonstration-plan","title":"6. Final Demonstration Plan","text":"","tags":["robotics","ROS2","TurtleBot","ESP32"]},{"location":"#setup","title":"Setup","text":"<p>The TurtleBot starts in an indoor setting with predefined obstacles. ESP32 sends a target coordinate and heading to the Raspberry Pi.</p>","tags":["robotics","ROS2","TurtleBot","ESP32"]},{"location":"#execution","title":"Execution","text":"<p>The Raspberry Pi receives the goal, maps the space using SLAM, and generates a safe path using Nav2. The TurtleBot autonomously navigates to the goal while displaying real-time sensor data and localization in the GUI.</p>","tags":["robotics","ROS2","TurtleBot","ESP32"]},{"location":"#evaluation-metrics","title":"Evaluation Metrics","text":"<ul> <li>Goal-reaching accuracy  </li> <li>Map construction quality  </li> <li>Obstacle avoidance efficiency  </li> <li>GUI visualization and latency  </li> </ul>","tags":["robotics","ROS2","TurtleBot","ESP32"]},{"location":"#7-testing-and-evaluation-plan","title":"7. Testing and Evaluation Plan","text":"","tags":["robotics","ROS2","TurtleBot","ESP32"]},{"location":"#1-unit-testing","title":"1. Unit Testing","text":"<ul> <li>ESP32 IMU data transmission  </li> <li>Sensor topic publishing in ROS2  </li> <li>Nav2 local planner  </li> </ul>","tags":["robotics","ROS2","TurtleBot","ESP32"]},{"location":"#2-integration-testing","title":"2. Integration Testing","text":"<ul> <li>Full path planning using live sensor data  </li> <li>Real-time response to goal changes  </li> </ul>","tags":["robotics","ROS2","TurtleBot","ESP32"]},{"location":"#3-error-handling","title":"3. Error Handling","text":"<ul> <li>Dropout handling for ESP32 messages  </li> <li>Navigation recovery from collision or missed goals  </li> </ul>","tags":["robotics","ROS2","TurtleBot","ESP32"]},{"location":"#4-performance-metrics","title":"4. Performance Metrics","text":"<ul> <li>Distance error to target  </li> <li>Time taken for goal completion  </li> <li>Obstacle handling success rate  </li> </ul>","tags":["robotics","ROS2","TurtleBot","ESP32"]},{"location":"#8-project-impact","title":"8. Project Impact","text":"<p>This project demonstrates how low-cost autonomous robots can be enhanced through ROS2-based sensor fusion and decentralized coordination using microcontrollers. It provides a foundation for assistive or service robots in indoor navigation tasks, with potential applications in elderly assistance, warehouse automation, and academic robotics education.</p>","tags":["robotics","ROS2","TurtleBot","ESP32"]},{"location":"#9-advising-and-resource-needs","title":"9. Advising and Resource Needs","text":"<p>Advisor: Prof. Daniel M Aukes  </p> <p>Prof. Daniel M Aukes, an esteemed faculty member with deep expertise in SLAM (Simultaneous Localization and Mapping) and multi-robot coordination, will serve as the primary advisor for this project. Prof. Aukes brings a wealth of experience in robotic systems design and implementation, which will be invaluable for guiding the technical development and integration aspects of our project. His prior work, focusing on the application of innovative robotics solutions in real-world scenarios, will provide critical insights into our design and execution phases.</p> <p>Prof. Aukes will also assist in troubleshooting complex system integration issues. Additionally, he will provide access to laboratory resources and equipment, facilitate networking with other robotics experts, and help in acquiring necessary project funding. His mentorship will be crucial in steering the project towards successful completion and ensuring that the team remains aligned with the latest advancements in robotics technology.</p>","tags":["robotics","ROS2","TurtleBot","ESP32"]},{"location":"Timeline/","title":"Project Timeline","text":""},{"location":"Timeline/#weekly-milestones","title":"Weekly Milestones","text":"Week Hardware Integration Interface Development Sensor Processing Controls &amp; Autonomy Week 7 (March 1-7) Setup UR5 and TurtleBot hardware Design initial UI mockups for monitoring Capture initial sensor data (camera, LiDAR, IMU) Basic ROS2 node setup for communication Week 8 (March 8-14) Test UR5 pick-and-place mechanism Develop ROS2-based interaction dashboard Implement object detection using OpenCV Integrate sensor feedback into navigation system Week 9 (March 15-21) Tune external camera and UR5 grasping accuracy Display real-time sensor data on UI Test LiDAR-based mapping and obstacle detection Implement LiDAR-based path planning Week 10 (March 22-28) Establish wireless communication between UR5 &amp; TurtleBot Enable remote UI control for robot monitoring Merge object detection data with LiDAR maps Implement TurtleBot navigation using Nav2 Week 11 (March 29-April 4) Conduct real-world object placement tests Enhance visualization of navigation path Improve SLAM performance for precise localization Implement adaptive obstacle avoidance Week 12 (April 5-11) Coordinate multi-robot operation Finalize GUI for monitoring &amp; debugging Improve real-time sensor fusion for accuracy Validate navigation and target localization Week 13 (April 12-18) Final hardware testing and debugging Ensure UI usability for real-time monitoring Cross-validate sensor data for robustness Final integration of UR5 and TurtleBot behavior Week 14 (April 19-25) Optimize data transmission &amp; system response time Finalize UI for seamless operation Conduct robustness tests for mapping accuracy Refine object approach and handling behaviors Week 15 (April 26-28) Final debugging and error corrections Ensure UI responsiveness and usability Cross-validate object localization and mapping Ensure seamless execution of task sequences Week 16 (April 29-30) Conduct final demo &amp; evaluation Document findings and prepare report Analyze performance and accuracy metrics Present results and future scope recommendations"},{"location":"about/","title":"About Team05","text":"<p>Welcome to the official website of Team05! We are a group of passionate students dedicated to advancing robotics technology through experimentation and deployment.</p>","tags":["team","mission","project"]},{"location":"about/#our-mission","title":"Our Mission","text":"<p>Our mission is to innovate and push the boundaries of robotics by developing cutting-edge systems and deploying them in real-world scenarios. We aim to create solutions that are both practical and impactful.</p>","tags":["team","mission","project"]},{"location":"about/#meet-the-team","title":"Meet the Team","text":"","tags":["team","mission","project"]},{"location":"about/#asrith-pandreka","title":"Asrith Pandreka","text":"<ul> <li>Role: Team Lead</li> <li>Expertise: Robotics, Embedded Systems</li> <li>Bio: Asrith is a master's student with a passion for robotics and automation. He oversees the team's projects and ensures everything runs smoothly.</li> </ul>","tags":["team","mission","project"]},{"location":"about/#varun-karthik","title":"Varun Karthik","text":"<ul> <li>Role: HW Design Developer</li> <li>Expertise: Mechatronics, AI</li> <li>Bio: Varun specializes in developing intelligent algorithms for robotics systems. He is responsible for the software architecture of our projects.</li> </ul>","tags":["team","mission","project"]},{"location":"about/#anjali-notani","title":"Anjali Notani","text":"<ul> <li>Role: Hardware Engineer</li> <li>Expertise: Circuit Design, Sensors</li> <li>Bio: Anjali focuses on designing and building the hardware components of our robotics systems. She ensures that our designs are both efficient and reliable.</li> </ul>","tags":["team","mission","project"]},{"location":"about/#our-projects","title":"Our Projects","text":"","tags":["team","mission","project"]},{"location":"about/#project-1-autonomous-navigation","title":"Project 1: Autonomous Navigation","text":"<ul> <li>Description: Developing an autonomous robot capable of navigating complex environments.</li> <li>Technologies: ROS, SLAM, Computer Vision</li> <li>Status: In Progress</li> </ul>","tags":["team","mission","project"]},{"location":"about/#project-2-robotic-arm","title":"Project 2: Robotic Arm","text":"<ul> <li>Description: Building a robotic arm for industrial automation.</li> <li>Technologies: Arduino, Servo Motors, Kinematics</li> <li>Status: Completed</li> </ul>","tags":["team","mission","project"]},{"location":"about/#contact-us","title":"Contact Us","text":"<p>If you have any questions or would like to collaborate with us, feel free to reach out:</p> <ul> <li>GitHub: Team05 GitHub</li> <li>Website: Team05 Website</li> </ul> <p>\"Innovation is the key to the future.\" \u2013 Team05</p>","tags":["team","mission","project"]},{"location":"charts/","title":"Charts","text":"<pre><code>graph TD;\n    A[\ud83d\udd04 Start System Initialization] --&gt;|Power Up &amp; Self Check| B\n    B[\ud83e\udd16 TurtleBot4: Activate Sensor Suite&lt;br/&gt;&lt;i&gt;IMU, LiDAR, Camera, Odometry&lt;/i&gt;] --&gt; C\n    C[\ud83d\uddfa\ufe0f Perform SLAM &amp; Build Map&lt;br/&gt;&lt;i&gt;LiDAR-based Environment Mapping&lt;/i&gt;] --&gt; D\n    D[\ud83d\udce1 ESP32: Transmit Target Coordinates&lt;br/&gt;&lt;i&gt;Over Wireless Interface&lt;/i&gt;] --&gt; E\n    E[\ud83e\udded ROS2: Convert Coordinates to Goal Pose&lt;br/&gt;&lt;i&gt;Apply TF Transformations&lt;/i&gt;] --&gt; F\n    F[\ud83d\udee3\ufe0f Nav2 Stack: Perform Global &amp; Local Planning&lt;br/&gt;&lt;i&gt;Pathfinding with Obstacle Avoidance&lt;/i&gt;] --&gt; G\n    G[\ud83e\udd16 TurtleBot4: Execute Motion Plan&lt;br/&gt;&lt;i&gt;Navigate Autonomously to Target&lt;/i&gt;] --&gt; H\n    H[\ud83d\udcca Collect Real-time Sensor Data&lt;br/&gt;&lt;i&gt;IMU for Stability, LiDAR for Collision Avoidance&lt;/i&gt;] --&gt; I\n    I[\ud83d\udccd Check Goal Reachability&lt;br/&gt;&lt;i&gt;Feedback Loop from Navigation Result&lt;/i&gt;] --&gt; J\n\n    J{\u2705 Has TurtleBot4 Reached Target?}\n    J --&gt;|Yes| K\n    J --&gt;|No: Replan &amp; Adjust Path| F\n\n    K[\ud83d\udcc8 Log Metrics &amp; Final Position&lt;br/&gt;&lt;i&gt;Store for Analysis&lt;/i&gt;] --&gt; L\n    L[\ud83e\udde0 Optimize Parameters&lt;br/&gt;&lt;i&gt;Update SLAM, TF, Nav Configs&lt;/i&gt;] --&gt; A\n\n    %% Styling\n    classDef startStyle fill:#CAAEFF,stroke:#333,stroke-width:2px;\n    classDef processStyle fill:#85D3FF,stroke:#333,stroke-width:1px;\n    classDef decisionStyle fill:#ff6666,stroke:#333,stroke-width:1px,font-weight:bold;\n\n    class A startStyle;\n    class B,C,D,E,F,G,H,I,K,L processStyle;\n    class J decisionStyle;</code></pre>"},{"location":"second-page/","title":"Second page","text":"\ud83d\udcf7 Camera Preview \ud83d\udce1 LIDAR Visualization LIDAR Display \ud83d\uddfa\ufe0f SLAM Mapping SLAM Map \ud83d\udcc8 IMU Angular Velocity"},{"location":"component-selection-example/","title":"Component Selection Example","text":""},{"location":"component-selection-example/#examples","title":"Examples","text":""},{"location":"component-selection-example/#style-1","title":"Style 1","text":"<p>This is the example found in the assignment, uses more html</p> <p>Table 1: Example component selection</p> <p>External Clock Module</p> Solution Pros Cons Option 1. XC1259TR-ND surface mount crystal$1/eachlink to product * Inexpensive[^1]* Compatible with PSoC* Meets surface mount constraint of project * Requires external components and support circuitry for interface* Needs special PCB layout. * Option 2. * CTX936TR-ND surface mount oscillator * $1/each * Link to product * Outputs a square wave * Stable over operating temperature  * Direct interface with PSoC (no external circuitry required) range * More expensive * Slow shipping speed <p>Choice: Option 2: CTX936TR-ND surface mount oscillator</p> <p>Rationale: A clock oscillator is easier to work with because it requires no external circuitry in order to interface with the PSoC. This is particularly important because we are not sure of the electrical characteristics of the PCB, which could affect the oscillation of a crystal. While the shipping speed is slow, according to the website if we order this week it will arrive within 3 weeks.</p>"},{"location":"component-selection-example/#style-2","title":"Style 2","text":"<p>Also acceptable, more markdown friendly</p> <p>External Clock Module</p> <ol> <li> <p>XC1259TR-ND surface mount crystal</p> <p></p> <ul> <li>$1/each</li> <li>link to product</li> </ul> Pros Cons Inexpensive Requires external components and support circuitry for interface Compatible with PSoC Needs special PCB layout. Meets surface mount constraint of project </li> <li> <p>CTX936TR-ND surface mount oscillator</p> <p></p> <ul> <li>$1/each</li> <li>Link to product</li> </ul> Pros Cons Outputs a square wave More expensive Stable over operating temperature Slow shipping speed Direct interface with PSoC (no external circuitry required) range </li> </ol> <p>Choice: Option 2: CTX936TR-ND surface mount oscillator</p> <p>Rationale: A clock oscillator is easier to work with because it requires no external circuitry in order to interface with the PSoC. This is particularly important because we are not sure of the electrical characteristics of the PCB, which could affect the oscillation of a crystal. While the shipping speed is slow, according to the website if we order this week it will arrive within 3 weeks.</p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\n  loader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\n  const svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\n  console.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"},{"location":"subfolder/","title":"This is the index to a subfolder","text":"<p>Things to discuss</p>"},{"location":"subfolder/about/","title":"About Team05","text":"<p>Welcome to the official website of Team05! We are a group of passionate students dedicated to advancing robotics technology through experimentation and deployment.</p>","tags":["team","mission","project"]},{"location":"subfolder/about/#our-mission","title":"Our Mission","text":"<p>Our mission is to innovate and push the boundaries of robotics by developing cutting-edge systems and deploying them in real-world scenarios. We aim to create solutions that are both practical and impactful.</p>","tags":["team","mission","project"]},{"location":"subfolder/about/#meet-the-team","title":"Meet the Team","text":"","tags":["team","mission","project"]},{"location":"subfolder/about/#john-doe","title":"John Doe","text":"<ul> <li>Role: Team Lead</li> <li>Expertise: Robotics, Embedded Systems</li> <li>Bio: John is a senior student with a passion for robotics and automation. He oversees the team's projects and ensures everything runs smoothly.</li> </ul>","tags":["team","mission","project"]},{"location":"subfolder/about/#jane-smith","title":"Jane Smith","text":"<ul> <li>Role: Software Developer</li> <li>Expertise: Machine Learning, AI</li> <li>Bio: Jane specializes in developing intelligent algorithms for robotics systems. She is responsible for the software architecture of our projects.</li> </ul>","tags":["team","mission","project"]},{"location":"subfolder/about/#alex-johnson","title":"Alex Johnson","text":"<ul> <li>Role: Hardware Engineer</li> <li>Expertise: Circuit Design, Sensors</li> <li>Bio: Alex focuses on designing and building the hardware components of our robotics systems. He ensures that our designs are both efficient and reliable.</li> </ul>","tags":["team","mission","project"]},{"location":"subfolder/about/#our-projects","title":"Our Projects","text":"","tags":["team","mission","project"]},{"location":"subfolder/about/#project-1-autonomous-navigation","title":"Project 1: Autonomous Navigation","text":"<ul> <li>Description: Developing an autonomous robot capable of navigating complex environments.</li> <li>Technologies: ROS, SLAM, Computer Vision</li> <li>Status: In Progress</li> </ul>","tags":["team","mission","project"]},{"location":"subfolder/about/#project-2-robotic-arm","title":"Project 2: Robotic Arm","text":"<ul> <li>Description: Building a robotic arm for industrial automation.</li> <li>Technologies: Arduino, Servo Motors, Kinematics</li> <li>Status: Completed</li> </ul>","tags":["team","mission","project"]},{"location":"subfolder/about/#our-achievements","title":"Our Achievements","text":"<ul> <li>2023 Robotics Competition: 1st Place</li> <li>2022 Innovation Award: Best Robotics Project</li> <li>2021 Hackathon: Top 5 Finalists</li> </ul>","tags":["team","mission","project"]},{"location":"subfolder/about/#contact-us","title":"Contact Us","text":"<p>If you have any questions or would like to collaborate with us, feel free to reach out:</p> <ul> <li>Email: team05@example.com</li> <li>GitHub: Team05 GitHub</li> <li>Website: Team05 Website</li> </ul> <p>\"Innovation is the key to the future.\" \u2013 Team05</p>","tags":["team","mission","project"]},{"location":"subfolder/another-subfile/","title":"This is a secondary sub page","text":"<p>Things to discuss</p>"}]}